package com.zinkwork.atm.utils;

import java.util.HashMap;
import java.util.Set;
import java.util.stream.Collectors;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.zinkwork.atm.entity.AtmEntity;
import com.zinkwork.atm.entity.NoteEntity;
import com.zinkwork.atm.entity.UserEntity;
import com.zinkwork.atm.exception.NoNotesAvailableException;
import com.zinkwork.atm.repository.AtmRepository;
import com.zinkwork.atm.repository.NoteRepository;
import com.zinkwork.atm.repository.UserRepository;

@Component
public class CommonUtils {
	
	@Autowired
	private NoteDispenserUtils noteDispenser;
	
	@Autowired
	private AtmRepository atmRepo;
	
	@Autowired
	private UserRepository userRepo;
	
	@Autowired
	private NoteRepository noteRepo;
	
	private static final Logger logger = LogManager.getLogger(CommonUtils.class);
	
//	@Transactional
	public void deductAmount(Long withdrawAmount,Integer atmId,Long accno) {
		UserEntity userObj=userRepo.findById(accno).get();
		AtmEntity atmObj=atmRepo.findById(atmId).get();
		Set<NoteEntity> noteObj= atmObj.getNoteEntity();
		logger.info("Note Deno:{}",noteObj);
		Integer[][] noteDetails=noteObj.stream().map(x->new Integer[] {x.getNote(),x.getCount()}).collect(Collectors.toList()).stream().sorted((x,y)->y[0].compareTo(x[0])).toArray(Integer[][]::new);
		logger.info("Available note denomination: {}",noteDetails);
		HashMap<Integer, Integer> dispensedNotes=noteDispenser.coinChange(noteDetails, withdrawAmount);
		if(dispensedNotes==null) {
			throw new NoNotesAvailableException("Notes not available. Please try other amount");
		}else {
			
			System.out.println(dispensedNotes);
			
			noteObj.stream().forEach(x->{
//				System.out.println(dispensedNotes.get(x.getNote()) + "  " + x.getNote());
				if(dispensedNotes.get(x.getNote()) != null) {
					System.out.println(x.getNote() + "   " + x.getNote());
					x.setCount(x.getCount() - dispensedNotes.get(x.getNote()));
				}
			});
			
			System.out.println(noteObj);
			noteRepo.saveAll(noteObj);
//			for(Entry<Integer, Integer> e : dispensedNotes.entrySet()) {
//				
//			}
		}
		Double currBal=userObj.getBalance();
		Double newBal= currBal-withdrawAmount;
		if(newBal>0) {
			userObj.setBalance(newBal);
		}else {
			userObj.setBalance(0.0);
		}
		//AtmEntity atmObj=atmRepo.findById(atmId).get();
		Double currAtmBal= atmObj.getBalance();
		Double newAtmBal=currAtmBal-withdrawAmount;
		atmObj.setBalance(newAtmBal);
		UserEntity savedUser=userRepo.save(userObj);
		logger.debug("transaction of user commited succesfully");
		logger.debug("UserInfo:{}",savedUser);
		AtmEntity savedAtm=atmRepo.save(atmObj);
		logger.debug("transaction of atm commited succesfully");
		logger.debug("AtmInfo:{}",savedAtm);
		
	}
}
