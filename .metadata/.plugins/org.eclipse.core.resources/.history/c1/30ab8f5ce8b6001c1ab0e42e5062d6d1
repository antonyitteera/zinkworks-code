package com.zinkwork.atm.service;

import java.util.Optional;

import javax.transaction.Transactional;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.InsufficientAuthenticationException;
import org.springframework.stereotype.Service;

import com.zinkwork.atm.DAO.RespDAO;
import com.zinkwork.atm.entity.AtmEntity;
import com.zinkwork.atm.entity.UserEntity;
import com.zinkwork.atm.exception.NoAtmBalanceException;
import com.zinkwork.atm.repository.AtmRepository;
import com.zinkwork.atm.repository.UserRepository;
import com.zinkwork.atm.validatiion.AtmValidation;

@Service
public class AtmServiceImpl implements AtmService{
	
	@Autowired
	private AtmValidation atmValidation;
	
	@Autowired
	private AtmRepository atmRepo;
	
	@Autowired
	private UserRepository userRepo;
	private static final Logger logger = LogManager.getLogger(AtmServiceImpl.class);

	@Override
	public void withdrawAmount(Long withdrawAmount, Integer atmId,Long accno) {
		if(atmValidation.atmBalanceCheck(withdrawAmount, atmId)) {
			if(atmValidation.userBalanceCheck(withdrawAmount, accno)) {
				 logger.info("Amount deducted successfully");
			}else {
				throw new InsufficientAuthenticationException("No sufficient balance in account");
			}
		}else {
			throw new NoAtmBalanceException("No sufficinet Balance in ATM");
		}
	}

	@Override
	public ResponseEntity<RespDAO> checkBalance(Long accno) {
		UserEntity userObj=userRepo.findById(accno).get();
		RespDAO resp= new RespDAO("Avaliable balance is "+userObj.getBalance()+".");
		return new ResponseEntity<RespDAO>(resp, HttpStatus.OK);
		
	}
	
}
